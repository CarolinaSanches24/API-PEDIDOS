[
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "RequestValidationError",
        "importPath": "fastapi.exceptions",
        "description": "fastapi.exceptions",
        "isExtraImport": true,
        "detail": "fastapi.exceptions",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "validar_dados_usuario",
        "importPath": "validations",
        "description": "validations",
        "isExtraImport": true,
        "detail": "validations",
        "documentation": {}
    },
    {
        "label": "validar_pedido",
        "importPath": "validations",
        "description": "validations",
        "isExtraImport": true,
        "detail": "validations",
        "documentation": {}
    },
    {
        "label": "verificar_lista_vazia",
        "importPath": "validations",
        "description": "validations",
        "isExtraImport": true,
        "detail": "validations",
        "documentation": {}
    },
    {
        "label": "Cliente",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Usuario",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Pedido",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Produto",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = FastAPI()\ndb_users: List[Usuario]=[]\ndb_clients :List[Cliente]=[]\ndb_pedidos :List[Pedido]=[]\ndb_produtos :List[Produto]=[]\n@app.get(\"/\")\nasync def inicio():\n    return {\"message\":\"Bem-vindo a Api Pedidos!\"}\n@app.get(\"/usuarios\")\nasync def listar_usuarios():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "Usuario",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Usuario(BaseModel):\n    #gerar um valor padrão para o campo. \n    #lambda gera um UUID aleatorio\n    id: str = Field(default_factory=lambda: str(uuid.uuid4())),\n    name:str;\n    email:str;\n    senha:str;\nclass Cliente(BaseModel):\n    name:str;\n    telephone:str;",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Cliente",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Cliente(BaseModel):\n    name:str;\n    telephone:str;\n    address:str;\nclass Produto(BaseModel):\n    descricao:str;\n    quantidade_estoque:int;\n    preco_unitario:float;\nclass Pedido(BaseModel):\n    id_produto:int;",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Produto",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Produto(BaseModel):\n    descricao:str;\n    quantidade_estoque:int;\n    preco_unitario:float;\nclass Pedido(BaseModel):\n    id_produto:int;\n    id_cliente:int;\n    quantidade :int;",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Pedido",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Pedido(BaseModel):\n    id_produto:int;\n    id_cliente:int;\n    quantidade :int;",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "verificar_lista_vazia",
        "kind": 2,
        "importPath": "validations",
        "description": "validations",
        "peekOfCode": "def verificar_lista_vazia(lista, mensagem):\n    if len(lista) == 0:\n        raise HTTPException(status_code=404, detail=mensagem)\n    else:\n        return lista\ndef validar_pedido(pedido, db_produtos, db_clients):\n    if pedido.id_cliente<1 or pedido.id_produto<1 or pedido.quantidade<1:\n        return False , \"O campo deve receber valores positivos e diferentes de 0\"\n    if not pedido.id_cliente or not pedido.id_produto or not pedido.quantidade:\n        return False, \"O preenchimento dos campos é obrigátorio\"",
        "detail": "validations",
        "documentation": {}
    },
    {
        "label": "validar_pedido",
        "kind": 2,
        "importPath": "validations",
        "description": "validations",
        "peekOfCode": "def validar_pedido(pedido, db_produtos, db_clients):\n    if pedido.id_cliente<1 or pedido.id_produto<1 or pedido.quantidade<1:\n        return False , \"O campo deve receber valores positivos e diferentes de 0\"\n    if not pedido.id_cliente or not pedido.id_produto or not pedido.quantidade:\n        return False, \"O preenchimento dos campos é obrigátorio\"\n    # verificar se o produto existe\n    produto_encontrado = None\n    for produto in db_produtos:\n        if produto[\"id\"] == pedido.id_produto:\n            produto_encontrado= produto",
        "detail": "validations",
        "documentation": {}
    },
    {
        "label": "validar_dados_usuario",
        "kind": 2,
        "importPath": "validations",
        "description": "validations",
        "peekOfCode": "def validar_dados_usuario(usuario):\n    # Se o ID estiver vazio, preenche com id randomico\n    if not usuario.id:\n        usuario.id = str(uuid.uuid4())\n    #Verifica se os campos estão vazios\n    if not usuario.name or not usuario.email or not usuario.senha:\n        return False, \"O preenchimento dos campos é obrigátorio\"\n    return True, \"\"",
        "detail": "validations",
        "documentation": {}
    }
]